#!/usr/bin/env python2
# emavel.py -- convert firmware EFP and CTD data to velocity

from __future__ import print_function

from os import makedirs, path, listdir
from sys import exit
import sys
from datetime import datetime, timedelta
from collections import namedtuple
from optparse import OptionParser
import string
import scipy.io
import numpy as np
import math

from getinfo import getinfo, split_ifile, mkinfo, getfltid
from geomag import geomag

def getmatfiles(idir,typ):
  allfiles = sorted(listdir(idir))
  matfiles = []
  hpids = []
  for ifile in allfiles:
    if ifile.find('~') >= 0:
      if options.verbose:
        print('skipped backup ifile=',ifile)
      continue
    if not all(c in string.printable for c in ifile):
      if options.verbose:
        print('skipped non-printable ifile=',ifile)
      continue
    toks = ifile.split('-')
    if toks[-1] == typ + '.mat':
      matfiles.append(ifile)
      hpids.append(int(toks[2]))
  return matfiles, hpids

def uxt2pyt(uxt):
  return datetime(1970,1,1) + timedelta(0,uxt)
  
def uxt2str(uxt):
  pyt = datetime(1970,1,1) + timedelta(0,uxt)
  return pyt.strftime('%Y-%m-%d %H:%M:%S')

def calc_irid_pos(vit):
  x = vit.x
  y = vit.y
  z = vit.z
  t = vit.t
  if x==0 and y==0 and z==0:
    lat = np.nan
    lon = np.nan
    uxt = int(0)
  else:
    h = math.sqrt(x*x + y*y)
    lat = math.atan2(z,h) * 180.0 / math.pi
    lon = math.atan2(y,x) * 180.0 / math.pi

    if   vit.uxt < 1201003200: # switched at 2008-01-22 12:00:00
      uxt0 =  833587211        # first  ref: 1996-06-01 00:00:11
    elif vit.uxt < 1403006400: # switched at 2014-06-17 12:00:00
      uxt0 = 1173325821        # second ref: 2007-03-08 03:50:21
    else:
      uxt0 = 1399818235        # third  ref: 2014-05-11 14:23:55
    uxt = uxt0 + t * 0.090

  irid = namedtuple('IRID',[])
  irid.lat = lat
  irid.lon = lon
  irid.uxt = int(uxt)
  return irid

def writemat_vel(dict, odir):
  ofile = '{0}/ema-{1}-{2:04d}-vel.mat'.format(odir,runid,hpid)
  if options.verbose:
    print('emavel: writemat_vel: ofile=',ofile)
  scipy.io.savemat(ofile, dict, format='4')

def writetxt_vel(dict, odir):
  ofile = '{0}/ema-{1}-{2:04d}-vel.txt'.format(odir,runid,hpid)
  if options.verbose:
    print('emavel: writetxt_vel: ofile=',ofile)

  try:
    ofp = open(ofile,'wt')
  except:
    print('error: emavel: writetxt_vel: cannot open ofile=',ofile)
    return

  pyt_ref = uxt2pyt(dict['uxt_ref'])
  pyt_gps = uxt2pyt(dict['uxt_gps'])
  pyt_irid = uxt2pyt(dict['uxt_irid'])

  print("#HDR#", file=ofp)
  print('# runid =',runid, file=ofp)
  print('# fltid =',dict['fltid'], file=ofp)
  print('# hpid  =',dict['hpid'], file=ofp)
  print('# ofile =',ofile, file=ofp)
  print('# uxt_ref  =',dict['uxt_ref'],' # ',pyt_ref, file=ofp)
  print('# lat_gps  = {0:.6f}'.format(dict['lat_gps']), file=ofp)
  print('# lon_gps  = {0:.6f}'.format(dict['lon_gps']), file=ofp)
  print('# uxt_gps  =',dict['uxt_gps'],' # ',pyt_gps, file=ofp)
  print('# lat_irid = {0:.6f}'.format(dict['lat_irid']), file=ofp)
  print('# lon_irid = {0:.6f}'.format(dict['lon_irid']), file=ofp)
  print('# uxt_irid =',dict['uxt_irid'],' # ',pyt_irid, file=ofp)
  print('# fh       =',dict['fh'], " # nT", file=ofp)
  print('# fz       =',dict['fz'], " # nT", file=ofp)
  print('# magvar   =',dict['magvar'], " # degrees", file=ofp)
  print('# esep1   =',dict['esep1'], " # m",file=ofp)
  print('# esep2   =',dict['esep2'], " # m",file=ofp)
  print('# uvpc1   = {0:.3e}'.format(dict['uvpc1']), " # uV", file=ofp)
  print('# uvpc2   = {0:.3e}'.format(dict['uvpc2']), " # uV", file=ofp)

  print('# nvals =',len(Pefp), file=ofp)
  print('# vars  = P,T,S,u1,v1,verr1,u2,v2,verr2,W,e1mean,e2mean,piston,uxt', file=ofp)
  print('# units = dbar,degC,PSU,m/s,m/s,m/s,m/s,m/s,m/s,m/s,uV,uV,counts,s', file=ofp)
  
  print("#DATA#", file=ofp)
  for i in range(0,len(Pefp)):
    print( '{0:.1f}'.format(dict['P'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['T'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['S'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['u1'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['v1'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['verr1'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['u2'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['v2'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['verr2'][i]),file=ofp, end='')
    print(',{0:.3f}'.format(dict['W'][i]),file=ofp, end='')
    print(',{0:.1f}'.format(dict['e1mean'][i]),file=ofp, end='')
    print(',{0:.1f}'.format(dict['e2mean'][i]),file=ofp, end='')
    print(',{0:.1f}'.format(dict['pc_efp'][i]),file=ofp, end='')
    print(',{0:.1f}'.format(dict['uxt'][i]),file=ofp, end='')
    print('',file=ofp)

  print("#EOF#",file=ofp)
  ofp.close()
  

def get_gps(set_gps, uxt):
  # find exact match gps
  if hpid in set_gps:
    gpsfile = '{0}/ema-{1}-{2:04d}-gps.mat'.format(decdir,runid,hpid)
    gps = scipy.io.loadmat(gpsfile)
    lat = gps['LAT'][0][-1]
    lon = gps['LON'][0][-1]
    uxt = gps['UXT_GPS'][0][-1]
    return float(lat), float(lon), int(uxt)

  else:
    h = np.array(list(set_gps),dtype=int)
    i = np.nonzero(h < int(hpid))[0]
    j = np.nonzero(h > int(hpid))[0]

    # print('hpid=',hpid)
    # print('h=',h)
    # print('i',i)
    # print('j',j)

    # this occurs on first surfacing after launch
    if len(i) == 0 and len(j) > 0:
      h2 = int(h[j[0]])
      gpsfile2 = '{0}/ema-{1}-{2:04d}-gps.mat'.format(decdir,runid,h2)
      try:
        gps2 = scipy.io.loadmat(gpsfile2)
        lat2 = gps2['LAT'][0][-1]
        lon2 = gps2['LON'][0][-1]
        uxt2 = gps2['UXT_GPS'][0][-1]
      except:
        print('cannot loadmat gpsfile2=',gpsfile2)
        exit(1)
      return lat2, lon2, int(uxt2)

    # interpolate lat, lon, uxt
    elif len(i) > 0 and len(j) > 0:
      # print('len(i)=',len(i),'i[-1]=',i[-1],'i=',i)
      # print('len(j)=',len(j))
      h1 = int(h[i[-1]])
      h2 = int(h[j[0]])
      gpsfile1 = '{0}/ema-{1}-{2:04d}-gps.mat'.format(decdir,runid,h1)
      gpsfile2 = '{0}/ema-{1}-{2:04d}-gps.mat'.format(decdir,runid,h2)
      try:
        gps1 = scipy.io.loadmat(gpsfile1)
        lat1 = gps1['LAT'][0][-1]
        lon1 = gps1['LON'][0][-1]
        uxt1 = gps1['UXT_GPS'][0][-1]
      except:
        print('cannot loadmat gpsfile1=',gpsfile1)
        exit(1)
      try:
        gps2 = scipy.io.loadmat(gpsfile2)
        lat2 = gps2['LAT'][0][-1]
        lon2 = gps2['LON'][0][-1]
        uxt2 = gps2['UXT_GPS'][0][-1]
      except:
        print('cannot loadmat gpsfile2=',gpsfile2)
        exit(1)

      f = float(uxt - uxt1) / float(uxt2 - uxt1)
      lat = lat1 + f * (lat2 - lat1) 
      lon = lon1 + f * (lon2 - lon1) 
      return lat, lon, int(uxt)

    else:
      return np.nan, np.nan, int(0)

def get_mis(set_mis):

  if hpid in set_mis:
    misfile = '{0}/ema-{1}-{2:04d}-mis.mat'.format(decdir,runid,hpid)
    mis_mat = scipy.io.loadmat(misfile)
  else:
    h = np.array(list(set_mis),dtype=int)
    i = np.nonzero(h < int(hpid))[0]
    j = np.nonzero(h > int(hpid))[0]
    if len(i) > 0:
      hi = int(h[i[-1]])
      misfile = '{0}/ema-{1}-{2:04d}-mis.mat'.format(decdir,runid,hi)
      mis_mat = scipy.io.loadmat(misfile)
    elif len(j) > 0:
      hj = int(h[j[-1]])
      misfile = '{0}/ema-{1}-{2:04d}-mis.mat'.format(decdir,runid,hj)
      mis_mat = scipy.io.loadmat(misfile)
    else:
      mis_mat = None

  mis = namedtuple('MIS',[])
  mis.navg = mis_mat['EmaProcessNvals'][0][0]
  return mis

def get_vit(set_vit):
  if hpid in set_vit:
    vitfile = '{0}/ema-{1}-{2:04d}-vit.mat'.format(decdir,runid,hpid)
    vit_mat = scipy.io.loadmat(vitfile)
  else:
    h = np.array(list(set_vit),dtype=int)
    i = np.nonzero(h < int(hpid))[0]
    j = np.nonzero(h > int(hpid))[0]
    if len(i) > 0:
      hi = int(h[i[-1]])
      vitfile = '{0}/ema-{1}-{2:04d}-vit.mat'.format(decdir,runid,hi)
      vit_mat = scipy.io.loadmat(vitfile)
    elif len(j) > 0:
      hj = int(h[j[-1]])
      vitfile = '{0}/ema-{1}-{2:04d}-vit.mat'.format(decdir,runid,hj)
      vit_mat = scipy.io.loadmat(vitfile)
    else:
      vit_mat = None

  vit = namedtuple('VIT',[])
  vit.uxt = vit_mat['DateVit'][0][0]
  vit.x   = vit_mat['x_irid'][0][0]
  vit.y   = vit_mat['y_irid'][0][0]
  vit.z   = vit_mat['z_irid'][0][0]
  vit.t   = vit_mat['t_irid'][0][0]
  return vit

if __name__ == '__main__':

  global runid, hpid, decdir

  parser = OptionParser(usage="%prog [Options] RunId[s]")

  parser.add_option('-v', '--verbose', 
    action='store_true', dest='verbose', default=False,
    help='print status messages to stdout')

  parser.add_option('-f', '--force', 
    action='store_true', dest='do_force', default=False,
    help='force computation of all vel files')

  parser.add_option('-p', '--plot', 
    action='store_true', dest='do_plot', default=False,
    help='plot some results')

  parser.add_option('-i', '--info', '--infofile',
    dest='infofile', default='./emainfo',
    help='file with processing parameters for each runid')

  (options, args) = parser.parse_args()

  if len(args) < 1:
    parser.print_help()
    exit()

  for arg in args:

    info = getinfo(arg, options.infofile)
    if info.runid == None:
      print('error: emavel: cannot get info for arg=',arg)
      continue

    runid = info.runid

    print('emavel: arg=',arg,'runid=',runid,'fltid=',info.fltid)

    if options.verbose:
      print('  info.datebeg=',info.datebeg)
      print('  info.dateend=',info.dateend)
      print('  info.decdir=',info.decdir)
      print('  info.veldir=',info.veldir)

    decdir = info.decdir + '/' + info.runid
    veldir = info.veldir + '/' + info.runid

    print('  decdir=',decdir)
    print('  veldir=',veldir)

    if not path.isdir(decdir):
      print('error: emavel: decdir=',decdir,'is not a directory')
      continue

    try:
      makedirs(veldir)
    except OSError:
      if not path.isdir(veldir):
        print('error: emavel: cannot create veldir=',veldir)
        continue

    ctd_files, ctd_hpids = getmatfiles(decdir,'ctd')
    efp_files, efp_hpids = getmatfiles(decdir,'efp')
    gps_files, gps_hpids = getmatfiles(decdir,'gps')
    vit_files, vit_hpids = getmatfiles(decdir,'vit')
    mis_files, mis_hpids = getmatfiles(decdir,'mis')
    vel_files, vel_hpids = getmatfiles(veldir,'vel')

    # if options.verbose:
    if False:
      print('ctd_files=',ctd_files,'\n')
      print('ctd_hpids=',ctd_hpids,'\n')
      print('efp_files=',efp_files,'\n')
      print('gps_files=',gps_files,'\n')
      print('vel_files=',vel_files,'\n')

    set_ctd = set(ctd_hpids)
    set_efp = set(efp_hpids)
    set_gps = set(gps_hpids)
    set_vit = set(vit_hpids)
    set_mis = set(mis_hpids)
    set_vel = set(vel_hpids)

    if options.verbose:
      print('  number of ctd=',len(set_ctd))
      print('  number of efp=',len(set_efp))

    set_intersection = set_ctd | set_efp
    set_union = set_ctd & set_efp & set_gps
    set_union = set_ctd & set_efp

    hpids_nogps = sorted(list(set_intersection-set_gps))   # set diff
    hpids_part  = sorted(list(set_intersection-set_union)) # set diff

    if options.do_force:
      hpids_proc  = sorted(list(set_union))   # do all
    else:
      hpids_proc  = sorted(list(set_union-set_vel)) # skip existing vel files

    if options.verbose:
      print('  hpids with missing gps:',hpids_nogps)
      print('  hpids with partial data:',hpids_part)

    if options.verbose:
      print('hpids to process:',hpids_proc)

    count_wrong_irid = 0
    count_no_pos = 0
    count_no_fh = 0
    count_no_ctd = 0
    count_no_efp = 0
    count_no_W = 0
    count_vel = 0
    for hpid in hpids_proc:
      if hpid % 2 == 1:
        dnup = 'dn'
        hpidup = hpid + 1
      else:
        dnup = 'up'
        hpidup = hpid
      if options.verbose:
        print('emavel: runid=',runid,'hpid=',hpid)

      ctdfile = '{0}/ema-{1}-{2:04d}-ctd.mat'.format(decdir,runid,hpid)
      efpfile = '{0}/ema-{1}-{2:04d}-efp.mat'.format(decdir,runid,hpid)
      vitfile = '{0}/ema-{1}-{2:04d}-vit.mat'.format(decdir,runid,hpidup)
      misfile = '{0}/ema-{1}-{2:04d}-mis.mat'.format(decdir,runid,hpidup)

      ctd = scipy.io.loadmat(ctdfile)
      efp = scipy.io.loadmat(efpfile)

      try:
        uxt_ctd = ctd['UXT'][0]
      except:
        if options.verbose:
          print('error: emavel: no UXT in ctdfile=',ctdfile)
        count_no_ctd += 1
        continue

      try:
        uxt_efp = efp['UXT'][0]
      except:
        if options.verbose:
          print('error: emavel: no UXT in efpfile=',efpfile)
        count_no_efp += 1
        continue

      if len(uxt_ctd) == 0:
        if options.verbose:
          print('error: uxt_ctd has zero len')
        count_no_ctd += 1
        continue

      if len(uxt_efp) == 0:
        if options.verbose:
          print('error: uxt_efp has zero len')
        count_no_efp += 1
        continue

      mis = get_mis(set_mis)
      vit = get_vit(set_vit)
      if mis == None or vit == None:
        print('error: emavel: mis or vit are None')
        exit(1)

      uxtflash = ctd['uxtflash'][0]

      lat_gps, lon_gps, uxt_gps = get_gps(set_gps, uxtflash)

      irid = calc_irid_pos(vit)

      if np.isfinite(lat_gps) and np.isfinite(lon_gps):
        lat = lat_gps
        lon = lon_gps
        uxt_pos = uxt_gps
      elif np.isfinite(irid.lat) and np.isfinite(irid.lon):
        lat = irid.lat
        lon = irid.lon
        uxt_pos = irid.uxt
        if options.verbose:
          print('irid lat=',lat,'lon=',lon,'date=',uxt2pyt(uxt_pos))
        if np.fabs(irid.uxt - vit.uxt) > 14400:
          count_wrong_irid += 1
          continue
      else:
        if options.verbose:
          print('error: emavel: bad lat/lon: runid=',runid,'hpid=',hpid)
        count_no_pos += 1
        continue;

      pyt_pos = uxt2pyt(uxt_pos)
      fh, fz, magvar = geomag(lat, lon, pyt_pos)

      if options.verbose:
        print('  ',pyt_pos,'lat={0:.3f}'.format(lat),'lon={0:.3f}'.\
            format(lon),'fh=',fh,'fz=',fz)

      if fh == None:
        print('error: emavel: cannot find fh for runid=',runid,'hpid=',hpid)
        count_no_fh += 1
        continue
      
      uxt_ref = float(min([uxt_ctd[0],uxt_efp[0]]))
      if options.verbose:
        print('uxt_ref=',uxt_ref,uxt2str(uxt_ref))

      tctd = uxt_ctd - uxt_ref
      tefp = uxt_efp - uxt_ref

      jctd = np.nonzero(np.isfinite(tctd))[0]
      if len(jctd) > 0:
        tctd_max = np.max(tctd[jctd])
      else:
        tctd_max = uxt_ref

      jefp = np.nonzero(np.isfinite(tefp))[0]
      if len(jefp) > 0:
        tefp_max = np.max(tefp[jefp])
      else:
        tefp_max = uxt_ref

      if dnup == 'dn':
        uxt_sfc = uxt_ref
      else:
        uxt_sfc = max([tctd_max,tefp_max])

      Pctd = ctd['P'][0]
      Tctd = ctd['T'][0]
      Sctd = ctd['S'][0]

      Pefp = np.interp(tefp, tctd, Pctd)
      Tefp = np.interp(tefp, tctd, Tctd)
      Sefp = np.interp(tefp, tctd, Sctd)

      Wctd = np.diff(Pctd) / np.diff(tctd)
      tW = (tctd[1:] + tctd[-1]) * 0.5
      if len(Wctd) > 1:
        Wefp = np.interp(tefp,tW, Wctd)
      else:
        print('error: len(Wctd)=',len(Wctd),'too short')
        count_no_W += 1
        continue

      uvpc1 = 1.0e6 * 1.0e-3 / np.power(2.0,24)
      uvpc2 = 1.0e6 * 1.0e-3 / np.power(2.0,24)
      off =  np.power(2.0,23)

      e1mean = (efp['E1MEAN4'][0] - off) * uvpc1
      e2mean = (efp['E2MEAN4'][0] - off) * uvpc2
      e1sdev =  efp['E1SDEV4'][0] * uvpc1
      e2sdev =  efp['E2SDEV4'][0] * uvpc2

      esep1 = (8+5/8)*0.0254; # m
      esep2 = (8+5/8)*0.0254; # m
      c1e1 = 0.50
      c1e2 = 0.50
      c2e1 = -0.20
      c2e2 = -0.20
      alpha2 = 1.95
      alpha1 = alpha2 - np.pi * 0.5

      sfv1 = 1.0e3 / (fz * esep1 * (1.0+c1e1)) * uvpc1
      sfv2 = 1.0e3 / (fz * esep2 * (1.0+c1e1)) * uvpc2
      sfw1 = fh / fz * (1.0+c2e1) / (1.0+c1e1)
      sfw2 = fh / fz * (1.0+c2e2) / (1.0+c1e2)

      s = np.sin(alpha1)
      c = np.cos(alpha1)
      e1coef40 = efp['E1COEF40'][0]
      e1coef41 = efp['E1COEF41'][0]
      y1 = c * e1coef41 - s * e1coef40
      x1 = s * e1coef41 + c * e1coef40

      s = np.sin(alpha2)
      c = np.cos(alpha2)
      e2coef40 = efp['E2COEF40'][0]
      e2coef41 = efp['E2COEF41'][0]
      y2 = c * e2coef41 - s * e2coef40
      x2 = s * e2coef41 + c * e2coef40

      u1 = -x1 * sfv1
      v1 = -y1 * sfv1 - Wefp * sfw1
      verr1 = np.fabs(e1sdev / uvpc1 * sfv1 / np.sqrt(float(mis.navg)))

      u2 = -x2 * sfv2
      v2 = -y2 * sfv2 - Wefp * sfw2
      verr2 = np.fabs(e2sdev / uvpc2 * sfv2 / np.sqrt(float(mis.navg)))


      pc_ctd = ctd['pc'][0]
      pc_efp = efp['PISTON_C0'][0]
      RotP = efp['ROTP_HX'][0]

      count_vel += 1

      veldict = {\
        'runid':runid, \
        'fltid':info.fltid, \
        'hpid':hpid, \
        'P':Pefp, \
        'T':Tefp, \
        'S':Sefp, \
        'W':Wefp, \
        'u1':   u1, \
        'v1':   v1, \
        'verr1':verr1, \
        'u2':   u2, \
        'v2':   v2, \
        'verr2':verr2, \
        'uvpc1':uvpc1, \
        'uvpc2':uvpc2, \
        'off':off, \
        'esep1':esep1, \
        'esep2':esep2, \
        'c1e1':c1e1, \
        'c2e1':c2e1, \
        'c1e2':c1e2, \
        'c2e2':c2e2, \
        'alpha1':alpha1, \
        'alpha2':alpha2, \
        'sfv1':sfv1, \
        'sfv2':sfv2, \
        'sfw1':sfw1, \
        'sfw2':sfw2, \
        'lat':lat, \
        'lon':lon, \
        'fh':fh, \
        'fz':fz, \
        'magvar':magvar, \
        'pc_ctd':pc_ctd, \
        'pc_efp':pc_efp, \
        'RotP':  RotP, \
        'lat_gps': lat_gps, \
        'lon_gps': lon_gps, \
        'uxt_gps': uxt_gps, \
        'lat_irid':irid.lat, \
        'lon_irid':irid.lon, \
        'uxt_irid':irid.uxt, \
        'navg':mis.navg,\
        'e1mean':e1mean,\
        'e2mean':e2mean,\
        'e1sdev':e1sdev,\
        'e2sdev':e2sdev,\
        'uxt_sfc':uxt_sfc,\
        'uxt':uxt_efp,\
        'uxt_ref':uxt_ref,\
      }

      writemat_vel(veldict,veldir)
      writetxt_vel(veldict,veldir)

      if options.do_plot:
        import matplotlib.pyplot as pyplot

        fig = pyplot.figure()
        fig.clf()
        ax1 = fig.add_subplot(1,2,1)
        ax2 = fig.add_subplot(1,2,2)

        ax1.hold(True)
        ax1.plot(u1,Pefp,'b')
        ax1.plot(u2,Pefp,'r')
        ax1.hold(False)
        ax1.invert_yaxis()

        ax2.hold(True)
        ax2.plot(v1,Pefp,'b')
        ax2.plot(v2,Pefp,'r')
        ax2.hold(False)
        ax2.invert_yaxis()
        
        print('close plot window to continue')
        sys.stdout.flush()
        pyplot.show()

      if options.verbose:
        uxt_ctd0 = uxt_ctd[0]
        print('emavel: uxt:',uxt2str(uxt_ctd0),\
          uxt_ctd0 - vit.uxt, uxt_ctd0 - uxt_gps, uxt_ctd0 - irid.uxt)

    print('  #files:  vel=',count_vel,\
          '  ctd=',len(ctd_hpids),\
          '  efp=',len(efp_hpids))
    print('  #missing:  irid=',count_wrong_irid,\
          '   pos=',count_no_pos,\
          '   fh=',count_no_fh,\
          '   ctd=',count_no_ctd,\
          '   W=',count_no_W,\
          '   efp=',count_no_efp)

